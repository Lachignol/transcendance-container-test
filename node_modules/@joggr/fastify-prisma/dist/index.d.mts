import { FastifyInstance, FastifyPluginAsync } from 'fastify';

declare namespace fastifyPrisma {
    export type FastifyPrismaOptions = {
        /**
         * The Prisma client instance to use, this is generated by Prisma.
         * @example
         * ```ts
         * import { PrismaClient } from '../my-prisma-client';
         *
         * const client = new PrismaClient();
         * await fastify.register(fastifyPrisma, { client });
         * ```
         */
        client: BasePrismaClient;
    };
    export const fastifyPrisma: FastifyPrisma;
    export { fastifyPrisma as default };
}
/**
 * Fastify plugin that allows you to share the same `prisma` connection across your entire fastify app.
 *
 * @example
 *  ```typescript
 * await fastify.register(fastifyPrisma);
 *
 * fastify.get('/users', async (request, reply) => {
 *   const users = await fastify.prisma.user.findMany();
 *   return users;
 * });
 * ```
 */
declare const _default: (fastify: FastifyInstance, opts: fastifyPrisma.FastifyPrismaOptions) => Promise<void>;

type FastifyPrisma = FastifyPluginAsync<fastifyPrisma.FastifyPrismaOptions>;
/**
 * A base type for the Prisma client generated by Prisma just for light-weight type-safety
 */
type BasePrismaClient = {
    $connect: () => Promise<void>;
    $disconnect: () => Promise<void>;
    [key: string]: AllowedAny;
};
type AllowedAny = any;

export { _default as default };
