import fp from 'fastify-plugin';

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var index = fp(
  (fastify, opts) => __async(null, null, function* () {
    if (!opts.client) {
      throw new Error("`client` is required");
    }
    if (!fastify.hasDecorator("prisma")) {
      const { client } = opts;
      yield client.$connect();
      fastify.decorate("prisma", client);
      fastify.addHook("onClose", (server) => __async(null, null, function* () {
        yield server.prisma.$disconnect();
      }));
    } else {
      throw new Error(
        "A `prisma` decorator has already been registered, please ensure you are not registering multiple instances of this plugin"
      );
    }
  }),
  {
    name: "@joggr/fastify-prisma",
    fastify: "5.x"
  }
);

export { index as default };
